/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

package cusp



import _ "runtime/cgo"



type _swig_fnptr *byte
type _swig_memberptr *byte

const TIME_SECOND int32 = 1000000000
const TIME_MILLISECOND int32 = 1000000
const TIME_MICROSECOND int32 = 1000
const TIME_NANOSECOND int32 = 1
func _swig_wrap_cuspInit__SWIG_0()

func CuspInit__SWIG_0() {
	_swig_wrap_cuspInit__SWIG_0()
}

func _swig_wrap_cuspInit__SWIG_1(int, *string)

func CuspInit__SWIG_1(arg1 int, arg2 *string) {
	_swig_wrap_cuspInit__SWIG_1(arg1, arg2)
}

func CuspInit(a ...interface{}) {
	argc := len(a)
	if argc == 0 {
		CuspInit__SWIG_0()
		return
	}
	if argc == 2 {
		CuspInit__SWIG_1(a[0].(int), a[1].(*string))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_cuspShutdown()

func CuspShutdown() {
	_swig_wrap_cuspShutdown()
}

func _swig_wrap_cuspMain()

func CuspMain() {
	_swig_wrap_cuspMain()
}

func _swig_wrap_cuspMainSigInt()

func CuspMainSigInt() {
	_swig_wrap_cuspMainSigInt()
}

func CuspMainRunning() bool
func _swig_wrap_cuspStopMain()

func CuspStopMain() {
	_swig_wrap_cuspStopMain()
}

func _swig_wrap_cuspProcessEvents()

func CuspProcessEvents() {
	_swig_wrap_cuspProcessEvents()
}

type SwigcptrInStream uintptr

func (p SwigcptrInStream) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrInStream) SwigIsInStream() {
}

func _swig_wrap_new_InStream__SWIG_0() SwigcptrInStream

func NewInStream__SWIG_0() InStream {
	return _swig_wrap_new_InStream__SWIG_0()
}

func _swig_wrap_new_InStream__SWIG_1(uintptr) SwigcptrInStream

func NewInStream__SWIG_1(arg1 InStream) InStream {
	return _swig_wrap_new_InStream__SWIG_1(arg1.Swigcptr())
}

func NewInStream(a ...interface{}) InStream {
	argc := len(a)
	if argc == 0 {
		return NewInStream__SWIG_0()
	}
	if argc == 1 {
		return NewInStream__SWIG_1(a[0].(InStream))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_InStream(uintptr)

func DeleteInStream(arg1 InStream) {
	_swig_wrap_delete_InStream(arg1.Swigcptr())
}

func _swig_wrap_InStream_swap(SwigcptrInStream, uintptr)

func (arg1 SwigcptrInStream) Swap(arg2 InStream) {
	_swig_wrap_InStream_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_InStream_isValid(SwigcptrInStream) bool

func (arg1 SwigcptrInStream) IsValid() bool {
	return _swig_wrap_InStream_isValid(arg1)
}

func _swig_wrap_InStream_read__SWIG_0(SwigcptrInStream, uintptr, int)

func (arg1 SwigcptrInStream) Read__SWIG_0(arg2 CUSP_InStream_ReadHandler, arg3 int) {
	_swig_wrap_InStream_read__SWIG_0(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_InStream_read__SWIG_1(SwigcptrInStream, uintptr)

func (arg1 SwigcptrInStream) Read__SWIG_1(arg2 CUSP_InStream_ReadHandler) {
	_swig_wrap_InStream_read__SWIG_1(arg1, arg2.Swigcptr())
}

func (p SwigcptrInStream) Read(a ...interface{}) {
	argc := len(a)
	if argc == 1 {
		p.Read__SWIG_1(a[0].(CUSP_InStream_ReadHandler))
		return
	}
	if argc == 2 {
		p.Read__SWIG_0(a[0].(CUSP_InStream_ReadHandler), a[1].(int))
		return
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_InStream_reset(SwigcptrInStream)

func (arg1 SwigcptrInStream) Reset() {
	_swig_wrap_InStream_reset(arg1)
}

func _swig_wrap_InStream_queuedOutOfOrder(SwigcptrInStream) int

func (arg1 SwigcptrInStream) QueuedOutOfOrder() int {
	return _swig_wrap_InStream_queuedOutOfOrder(arg1)
}

func _swig_wrap_InStream_queuedUnread(SwigcptrInStream) int

func (arg1 SwigcptrInStream) QueuedUnread() int {
	return _swig_wrap_InStream_queuedUnread(arg1)
}

func _swig_wrap_InStream_bytesReceived(SwigcptrInStream) int64

func (arg1 SwigcptrInStream) BytesReceived() int64 {
	return _swig_wrap_InStream_bytesReceived(arg1)
}

type InStream interface {
	Swigcptr() uintptr
	SwigIsInStream()
	Swap(arg2 InStream)
	IsValid() bool
	Read(a ...interface{})
	Reset()
	QueuedOutOfOrder() int
	QueuedUnread() int
	BytesReceived() int64
}

type SwigcptrOutStream uintptr

func (p SwigcptrOutStream) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrOutStream) SwigIsOutStream() {
}

func _swig_wrap_new_OutStream__SWIG_0() SwigcptrOutStream

func NewOutStream__SWIG_0() OutStream {
	return _swig_wrap_new_OutStream__SWIG_0()
}

func _swig_wrap_new_OutStream__SWIG_1(uintptr) SwigcptrOutStream

func NewOutStream__SWIG_1(arg1 OutStream) OutStream {
	return _swig_wrap_new_OutStream__SWIG_1(arg1.Swigcptr())
}

func NewOutStream(a ...interface{}) OutStream {
	argc := len(a)
	if argc == 0 {
		return NewOutStream__SWIG_0()
	}
	if argc == 1 {
		return NewOutStream__SWIG_1(a[0].(OutStream))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_OutStream(uintptr)

func DeleteOutStream(arg1 OutStream) {
	_swig_wrap_delete_OutStream(arg1.Swigcptr())
}

func _swig_wrap_OutStream_swap(SwigcptrOutStream, uintptr)

func (arg1 SwigcptrOutStream) Swap(arg2 OutStream) {
	_swig_wrap_OutStream_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_OutStream_isValid(SwigcptrOutStream) bool

func (arg1 SwigcptrOutStream) IsValid() bool {
	return _swig_wrap_OutStream_isValid(arg1)
}

func _swig_wrap_OutStream_getPriority(SwigcptrOutStream) float32

func (arg1 SwigcptrOutStream) GetPriority() float32 {
	return _swig_wrap_OutStream_getPriority(arg1)
}

func _swig_wrap_OutStream_setPriority(SwigcptrOutStream, float32)

func (arg1 SwigcptrOutStream) SetPriority(arg2 float32) {
	_swig_wrap_OutStream_setPriority(arg1, arg2)
}

func _swig_wrap_OutStream_write(SwigcptrOutStream, uintptr, int, uintptr)

func (arg1 SwigcptrOutStream) Write(arg2 uintptr, arg3 int, arg4 CUSP_OutStream_WriteHandler) {
	_swig_wrap_OutStream_write(arg1, arg2, arg3, arg4.Swigcptr())
}

func _swig_wrap_OutStream_shutdown(SwigcptrOutStream, uintptr)

func (arg1 SwigcptrOutStream) Shutdown(arg2 CUSP_OutStream_ShutdownHandler) {
	_swig_wrap_OutStream_shutdown(arg1, arg2.Swigcptr())
}

func _swig_wrap_OutStream_reset(SwigcptrOutStream)

func (arg1 SwigcptrOutStream) Reset() {
	_swig_wrap_OutStream_reset(arg1)
}

func _swig_wrap_OutStream_queuedInflight(SwigcptrOutStream) int

func (arg1 SwigcptrOutStream) QueuedInflight() int {
	return _swig_wrap_OutStream_queuedInflight(arg1)
}

func _swig_wrap_OutStream_queuedToRetransmit(SwigcptrOutStream) int

func (arg1 SwigcptrOutStream) QueuedToRetransmit() int {
	return _swig_wrap_OutStream_queuedToRetransmit(arg1)
}

func _swig_wrap_OutStream_bytesSent(SwigcptrOutStream) int64

func (arg1 SwigcptrOutStream) BytesSent() int64 {
	return _swig_wrap_OutStream_bytesSent(arg1)
}

type OutStream interface {
	Swigcptr() uintptr
	SwigIsOutStream()
	Swap(arg2 OutStream)
	IsValid() bool
	GetPriority() float32
	SetPriority(arg2 float32)
	Write(arg2 uintptr, arg3 int, arg4 CUSP_OutStream_WriteHandler)
	Shutdown(arg2 CUSP_OutStream_ShutdownHandler)
	Reset()
	QueuedInflight() int
	QueuedToRetransmit() int
	BytesSent() int64
}

type SwigcptrAddress uintptr

func (p SwigcptrAddress) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrAddress) SwigIsAddress() {
}

func _swig_wrap_Address_fromString(string) SwigcptrAddress

func AddressFromString(arg1 string) Address {
	return _swig_wrap_Address_fromString(arg1)
}

func _swig_wrap_new_Address__SWIG_0() SwigcptrAddress

func NewAddress__SWIG_0() Address {
	return _swig_wrap_new_Address__SWIG_0()
}

func _swig_wrap_new_Address__SWIG_1(uintptr) SwigcptrAddress

func NewAddress__SWIG_1(arg1 Address) Address {
	return _swig_wrap_new_Address__SWIG_1(arg1.Swigcptr())
}

func NewAddress(a ...interface{}) Address {
	argc := len(a)
	if argc == 0 {
		return NewAddress__SWIG_0()
	}
	if argc == 1 {
		return NewAddress__SWIG_1(a[0].(Address))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Address(uintptr)

func DeleteAddress(arg1 Address) {
	_swig_wrap_delete_Address(arg1.Swigcptr())
}

func _swig_wrap_Address_swap(SwigcptrAddress, uintptr)

func (arg1 SwigcptrAddress) Swap(arg2 Address) {
	_swig_wrap_Address_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_Address_isValid(SwigcptrAddress) bool

func (arg1 SwigcptrAddress) IsValid() bool {
	return _swig_wrap_Address_isValid(arg1)
}

func _swig_wrap_Address_toString(SwigcptrAddress) string

func (arg1 SwigcptrAddress) ToString() string {
	return _swig_wrap_Address_toString(arg1)
}

type Address interface {
	Swigcptr() uintptr
	SwigIsAddress()
	Swap(arg2 Address)
	IsValid() bool
	ToString() string
}

type SwigcptrPublicKeySuite uintptr

func (p SwigcptrPublicKeySuite) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPublicKeySuite) SwigIsPublicKeySuite() {
}

func _swig_wrap_PublicKeySuite_isValid(SwigcptrPublicKeySuite) bool

func (arg1 SwigcptrPublicKeySuite) IsValid() bool {
	return _swig_wrap_PublicKeySuite_isValid(arg1)
}

func _swig_wrap_PublicKeySuite_name(SwigcptrPublicKeySuite) string

func (arg1 SwigcptrPublicKeySuite) Name() string {
	return _swig_wrap_PublicKeySuite_name(arg1)
}

func _swig_wrap_PublicKeySuite_cost(SwigcptrPublicKeySuite) float32

func (arg1 SwigcptrPublicKeySuite) Cost() float32 {
	return _swig_wrap_PublicKeySuite_cost(arg1)
}

func _swig_wrap_delete_PublicKeySuite(uintptr)

func DeletePublicKeySuite(arg1 PublicKeySuite) {
	_swig_wrap_delete_PublicKeySuite(arg1.Swigcptr())
}

type PublicKeySuite interface {
	Swigcptr() uintptr
	SwigIsPublicKeySuite()
	IsValid() bool
	Name() string
	Cost() float32
}

type SwigcptrPublicKeySuiteSet uintptr

func (p SwigcptrPublicKeySuiteSet) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPublicKeySuiteSet) SwigIsPublicKeySuiteSet() {
}

func _swig_wrap_PublicKeySuiteSet_all() SwigcptrPublicKeySuiteSet

func PublicKeySuiteSetAll() PublicKeySuiteSet {
	return _swig_wrap_PublicKeySuiteSet_all()
}

func _swig_wrap_PublicKeySuiteSet_defaults() SwigcptrPublicKeySuiteSet

func PublicKeySuiteSetDefaults() PublicKeySuiteSet {
	return _swig_wrap_PublicKeySuiteSet_defaults()
}

func _swig_wrap_PublicKeySuiteSet_isEmpty(SwigcptrPublicKeySuiteSet) bool

func (arg1 SwigcptrPublicKeySuiteSet) IsEmpty() bool {
	return _swig_wrap_PublicKeySuiteSet_isEmpty(arg1)
}

func _swig_wrap_PublicKeySuiteSet_contains(SwigcptrPublicKeySuiteSet, uintptr) bool

func (arg1 SwigcptrPublicKeySuiteSet) Contains(arg2 PublicKeySuite) bool {
	return _swig_wrap_PublicKeySuiteSet_contains(arg1, arg2.Swigcptr())
}

func _swig_wrap_PublicKeySuiteSet_element(uintptr) SwigcptrPublicKeySuiteSet

func PublicKeySuiteSetElement(arg1 PublicKeySuite) PublicKeySuiteSet {
	return _swig_wrap_PublicKeySuiteSet_element(arg1.Swigcptr())
}

func _swig_wrap_PublicKeySuiteSet_cheapest(SwigcptrPublicKeySuiteSet) SwigcptrPublicKeySuite

func (arg1 SwigcptrPublicKeySuiteSet) Cheapest() PublicKeySuite {
	return _swig_wrap_PublicKeySuiteSet_cheapest(arg1)
}

func _swig_wrap_PublicKeySuiteSet_iterator(SwigcptrPublicKeySuiteSet) SwigcptrCUSP_PublicKeySuiteSet_Iterator

func (arg1 SwigcptrPublicKeySuiteSet) Iterator() CUSP_PublicKeySuiteSet_Iterator {
	return _swig_wrap_PublicKeySuiteSet_iterator(arg1)
}

func _swig_wrap_PublicKeySuiteSet_toMask(SwigcptrPublicKeySuiteSet) uint16

func (arg1 SwigcptrPublicKeySuiteSet) ToMask() uint16 {
	return _swig_wrap_PublicKeySuiteSet_toMask(arg1)
}

func _swig_wrap_PublicKeySuiteSet_fromMask(uint16) SwigcptrPublicKeySuiteSet

func PublicKeySuiteSetFromMask(arg1 uint16) PublicKeySuiteSet {
	return _swig_wrap_PublicKeySuiteSet_fromMask(arg1)
}

func _swig_wrap_delete_PublicKeySuiteSet(uintptr)

func DeletePublicKeySuiteSet(arg1 PublicKeySuiteSet) {
	_swig_wrap_delete_PublicKeySuiteSet(arg1.Swigcptr())
}

type PublicKeySuiteSet interface {
	Swigcptr() uintptr
	SwigIsPublicKeySuiteSet()
	IsEmpty() bool
	Contains(arg2 PublicKeySuite) bool
	Cheapest() PublicKeySuite
	Iterator() CUSP_PublicKeySuiteSet_Iterator
	ToMask() uint16
}

type SwigcptrSymmetricSuite uintptr

func (p SwigcptrSymmetricSuite) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSymmetricSuite) SwigIsSymmetricSuite() {
}

func _swig_wrap_SymmetricSuite_isValid(SwigcptrSymmetricSuite) bool

func (arg1 SwigcptrSymmetricSuite) IsValid() bool {
	return _swig_wrap_SymmetricSuite_isValid(arg1)
}

func _swig_wrap_SymmetricSuite_name(SwigcptrSymmetricSuite) string

func (arg1 SwigcptrSymmetricSuite) Name() string {
	return _swig_wrap_SymmetricSuite_name(arg1)
}

func _swig_wrap_SymmetricSuite_cost(SwigcptrSymmetricSuite) float32

func (arg1 SwigcptrSymmetricSuite) Cost() float32 {
	return _swig_wrap_SymmetricSuite_cost(arg1)
}

func _swig_wrap_delete_SymmetricSuite(uintptr)

func DeleteSymmetricSuite(arg1 SymmetricSuite) {
	_swig_wrap_delete_SymmetricSuite(arg1.Swigcptr())
}

type SymmetricSuite interface {
	Swigcptr() uintptr
	SwigIsSymmetricSuite()
	IsValid() bool
	Name() string
	Cost() float32
}

type SwigcptrSymmetricSuiteSet uintptr

func (p SwigcptrSymmetricSuiteSet) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSymmetricSuiteSet) SwigIsSymmetricSuiteSet() {
}

func _swig_wrap_SymmetricSuiteSet_all() SwigcptrSymmetricSuiteSet

func SymmetricSuiteSetAll() SymmetricSuiteSet {
	return _swig_wrap_SymmetricSuiteSet_all()
}

func _swig_wrap_SymmetricSuiteSet_defaults() SwigcptrSymmetricSuiteSet

func SymmetricSuiteSetDefaults() SymmetricSuiteSet {
	return _swig_wrap_SymmetricSuiteSet_defaults()
}

func _swig_wrap_SymmetricSuiteSet_isEmpty(SwigcptrSymmetricSuiteSet) bool

func (arg1 SwigcptrSymmetricSuiteSet) IsEmpty() bool {
	return _swig_wrap_SymmetricSuiteSet_isEmpty(arg1)
}

func _swig_wrap_SymmetricSuiteSet_contains(SwigcptrSymmetricSuiteSet, uintptr) bool

func (arg1 SwigcptrSymmetricSuiteSet) Contains(arg2 SymmetricSuite) bool {
	return _swig_wrap_SymmetricSuiteSet_contains(arg1, arg2.Swigcptr())
}

func _swig_wrap_SymmetricSuiteSet_element(uintptr) SwigcptrSymmetricSuiteSet

func SymmetricSuiteSetElement(arg1 SymmetricSuite) SymmetricSuiteSet {
	return _swig_wrap_SymmetricSuiteSet_element(arg1.Swigcptr())
}

func _swig_wrap_SymmetricSuiteSet_cheapest(SwigcptrSymmetricSuiteSet) SwigcptrSymmetricSuite

func (arg1 SwigcptrSymmetricSuiteSet) Cheapest() SymmetricSuite {
	return _swig_wrap_SymmetricSuiteSet_cheapest(arg1)
}

func _swig_wrap_SymmetricSuiteSet_iterator(SwigcptrSymmetricSuiteSet) SwigcptrCUSP_SymmetricSuiteSet_Iterator

func (arg1 SwigcptrSymmetricSuiteSet) Iterator() CUSP_SymmetricSuiteSet_Iterator {
	return _swig_wrap_SymmetricSuiteSet_iterator(arg1)
}

func _swig_wrap_SymmetricSuiteSet_toMask(SwigcptrSymmetricSuiteSet) uint16

func (arg1 SwigcptrSymmetricSuiteSet) ToMask() uint16 {
	return _swig_wrap_SymmetricSuiteSet_toMask(arg1)
}

func _swig_wrap_SymmetricSuiteSet_fromMask(uint16) SwigcptrSymmetricSuiteSet

func SymmetricSuiteSetFromMask(arg1 uint16) SymmetricSuiteSet {
	return _swig_wrap_SymmetricSuiteSet_fromMask(arg1)
}

func _swig_wrap_delete_SymmetricSuiteSet(uintptr)

func DeleteSymmetricSuiteSet(arg1 SymmetricSuiteSet) {
	_swig_wrap_delete_SymmetricSuiteSet(arg1.Swigcptr())
}

type SymmetricSuiteSet interface {
	Swigcptr() uintptr
	SwigIsSymmetricSuiteSet()
	IsEmpty() bool
	Contains(arg2 SymmetricSuite) bool
	Cheapest() SymmetricSuite
	Iterator() CUSP_SymmetricSuiteSet_Iterator
	ToMask() uint16
}

type SwigcptrPublicKey uintptr

func (p SwigcptrPublicKey) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPublicKey) SwigIsPublicKey() {
}

func _swig_wrap_new_PublicKey__SWIG_0() SwigcptrPublicKey

func NewPublicKey__SWIG_0() PublicKey {
	return _swig_wrap_new_PublicKey__SWIG_0()
}

func _swig_wrap_new_PublicKey__SWIG_1(uintptr) SwigcptrPublicKey

func NewPublicKey__SWIG_1(arg1 PublicKey) PublicKey {
	return _swig_wrap_new_PublicKey__SWIG_1(arg1.Swigcptr())
}

func NewPublicKey(a ...interface{}) PublicKey {
	argc := len(a)
	if argc == 0 {
		return NewPublicKey__SWIG_0()
	}
	if argc == 1 {
		return NewPublicKey__SWIG_1(a[0].(PublicKey))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_PublicKey(uintptr)

func DeletePublicKey(arg1 PublicKey) {
	_swig_wrap_delete_PublicKey(arg1.Swigcptr())
}

func _swig_wrap_PublicKey_swap(SwigcptrPublicKey, uintptr)

func (arg1 SwigcptrPublicKey) Swap(arg2 PublicKey) {
	_swig_wrap_PublicKey_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_PublicKey_isValid(SwigcptrPublicKey) bool

func (arg1 SwigcptrPublicKey) IsValid() bool {
	return _swig_wrap_PublicKey_isValid(arg1)
}

func _swig_wrap_PublicKey_toString(SwigcptrPublicKey) string

func (arg1 SwigcptrPublicKey) ToString() string {
	return _swig_wrap_PublicKey_toString(arg1)
}

func _swig_wrap_PublicKey_suite(SwigcptrPublicKey) SwigcptrPublicKeySuite

func (arg1 SwigcptrPublicKey) Suite() PublicKeySuite {
	return _swig_wrap_PublicKey_suite(arg1)
}

type PublicKey interface {
	Swigcptr() uintptr
	SwigIsPublicKey()
	Swap(arg2 PublicKey)
	IsValid() bool
	ToString() string
	Suite() PublicKeySuite
}

type SwigcptrPrivateKey uintptr

func (p SwigcptrPrivateKey) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrPrivateKey) SwigIsPrivateKey() {
}

func _swig_wrap_new_PrivateKey__SWIG_0() SwigcptrPrivateKey

func NewPrivateKey__SWIG_0() PrivateKey {
	return _swig_wrap_new_PrivateKey__SWIG_0()
}

func _swig_wrap_new_PrivateKey__SWIG_1(uintptr) SwigcptrPrivateKey

func NewPrivateKey__SWIG_1(arg1 PrivateKey) PrivateKey {
	return _swig_wrap_new_PrivateKey__SWIG_1(arg1.Swigcptr())
}

func NewPrivateKey(a ...interface{}) PrivateKey {
	argc := len(a)
	if argc == 0 {
		return NewPrivateKey__SWIG_0()
	}
	if argc == 1 {
		return NewPrivateKey__SWIG_1(a[0].(PrivateKey))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_PrivateKey(uintptr)

func DeletePrivateKey(arg1 PrivateKey) {
	_swig_wrap_delete_PrivateKey(arg1.Swigcptr())
}

func _swig_wrap_PrivateKey_swap(SwigcptrPrivateKey, uintptr)

func (arg1 SwigcptrPrivateKey) Swap(arg2 PrivateKey) {
	_swig_wrap_PrivateKey_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_PrivateKey_isValid(SwigcptrPrivateKey) bool

func (arg1 SwigcptrPrivateKey) IsValid() bool {
	return _swig_wrap_PrivateKey_isValid(arg1)
}

func _swig_wrap_PrivateKey_create() SwigcptrPrivateKey

func PrivateKeyCreate() PrivateKey {
	return _swig_wrap_PrivateKey_create()
}

func _swig_wrap_PrivateKey_save(SwigcptrPrivateKey, string) string

func (arg1 SwigcptrPrivateKey) Save(arg2 string) string {
	return _swig_wrap_PrivateKey_save(arg1, arg2)
}

func _swig_wrap_PrivateKey_load(string, string) SwigcptrPrivateKey

func PrivateKeyLoad(arg1 string, arg2 string) PrivateKey {
	return _swig_wrap_PrivateKey_load(arg1, arg2)
}

func _swig_wrap_PrivateKey_pubkey(SwigcptrPrivateKey, uintptr) SwigcptrPublicKey

func (arg1 SwigcptrPrivateKey) Pubkey(arg2 PublicKeySuite) PublicKey {
	return _swig_wrap_PrivateKey_pubkey(arg1, arg2.Swigcptr())
}

type PrivateKey interface {
	Swigcptr() uintptr
	SwigIsPrivateKey()
	Swap(arg2 PrivateKey)
	IsValid() bool
	Save(arg2 string) string
	Pubkey(arg2 PublicKeySuite) PublicKey
}

type SwigcptrHost uintptr

func (p SwigcptrHost) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrHost) SwigIsHost() {
}

func _swig_wrap_new_Host__SWIG_0() SwigcptrHost

func NewHost__SWIG_0() Host {
	return _swig_wrap_new_Host__SWIG_0()
}

func _swig_wrap_new_Host__SWIG_1(uintptr) SwigcptrHost

func NewHost__SWIG_1(arg1 Host) Host {
	return _swig_wrap_new_Host__SWIG_1(arg1.Swigcptr())
}

func NewHost(a ...interface{}) Host {
	argc := len(a)
	if argc == 0 {
		return NewHost__SWIG_0()
	}
	if argc == 1 {
		return NewHost__SWIG_1(a[0].(Host))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Host(uintptr)

func DeleteHost(arg1 Host) {
	_swig_wrap_delete_Host(arg1.Swigcptr())
}

func _swig_wrap_Host_swap(SwigcptrHost, uintptr)

func (arg1 SwigcptrHost) Swap(arg2 Host) {
	_swig_wrap_Host_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_Host_isValid(SwigcptrHost) bool

func (arg1 SwigcptrHost) IsValid() bool {
	return _swig_wrap_Host_isValid(arg1)
}

func _swig_wrap_Host_connect(SwigcptrHost, uint16) SwigcptrOutStream

func (arg1 SwigcptrHost) Connect(arg2 uint16) OutStream {
	return _swig_wrap_Host_connect(arg1, arg2)
}

func _swig_wrap_Host_listen(SwigcptrHost, uintptr) uint16

func (arg1 SwigcptrHost) Listen(arg2 CUSP_Host_ListenHandler) uint16 {
	return _swig_wrap_Host_listen(arg1, arg2.Swigcptr())
}

func _swig_wrap_Host_unlisten(SwigcptrHost, uint16)

func (arg1 SwigcptrHost) Unlisten(arg2 uint16) {
	_swig_wrap_Host_unlisten(arg1, arg2)
}

func _swig_wrap_Host_key(SwigcptrHost) SwigcptrPublicKey

func (arg1 SwigcptrHost) Key() PublicKey {
	return _swig_wrap_Host_key(arg1)
}

func _swig_wrap_Host_keyStr(SwigcptrHost) string

func (arg1 SwigcptrHost) KeyStr() string {
	return _swig_wrap_Host_keyStr(arg1)
}

func _swig_wrap_Host_address(SwigcptrHost) SwigcptrAddress

func (arg1 SwigcptrHost) Address() Address {
	return _swig_wrap_Host_address(arg1)
}

func _swig_wrap_Host_toString(SwigcptrHost) string

func (arg1 SwigcptrHost) ToString() string {
	return _swig_wrap_Host_toString(arg1)
}

func _swig_wrap_Host_inStreams(SwigcptrHost) SwigcptrCUSP_InStream_Iterator

func (arg1 SwigcptrHost) InStreams() CUSP_InStream_Iterator {
	return _swig_wrap_Host_inStreams(arg1)
}

func _swig_wrap_Host_outStreams(SwigcptrHost) SwigcptrCUSP_OutStream_Iterator

func (arg1 SwigcptrHost) OutStreams() CUSP_OutStream_Iterator {
	return _swig_wrap_Host_outStreams(arg1)
}

func _swig_wrap_Host_queuedOutOfOrder(SwigcptrHost) int

func (arg1 SwigcptrHost) QueuedOutOfOrder() int {
	return _swig_wrap_Host_queuedOutOfOrder(arg1)
}

func _swig_wrap_Host_queuedUnread(SwigcptrHost) int

func (arg1 SwigcptrHost) QueuedUnread() int {
	return _swig_wrap_Host_queuedUnread(arg1)
}

func _swig_wrap_Host_queuedInflight(SwigcptrHost) int

func (arg1 SwigcptrHost) QueuedInflight() int {
	return _swig_wrap_Host_queuedInflight(arg1)
}

func _swig_wrap_Host_queuedToRetransmit(SwigcptrHost) int

func (arg1 SwigcptrHost) QueuedToRetransmit() int {
	return _swig_wrap_Host_queuedToRetransmit(arg1)
}

func _swig_wrap_Host_bytesReceived(SwigcptrHost) int64

func (arg1 SwigcptrHost) BytesReceived() int64 {
	return _swig_wrap_Host_bytesReceived(arg1)
}

func _swig_wrap_Host_bytesSent(SwigcptrHost) int64

func (arg1 SwigcptrHost) BytesSent() int64 {
	return _swig_wrap_Host_bytesSent(arg1)
}

func _swig_wrap_Host_lastReceive(SwigcptrHost) int64

func (arg1 SwigcptrHost) LastReceive() int64 {
	return _swig_wrap_Host_lastReceive(arg1)
}

func _swig_wrap_Host_lastSend(SwigcptrHost) int64

func (arg1 SwigcptrHost) LastSend() int64 {
	return _swig_wrap_Host_lastSend(arg1)
}

type Host interface {
	Swigcptr() uintptr
	SwigIsHost()
	Swap(arg2 Host)
	IsValid() bool
	Connect(arg2 uint16) OutStream
	Listen(arg2 CUSP_Host_ListenHandler) uint16
	Unlisten(arg2 uint16)
	Key() PublicKey
	KeyStr() string
	Address() Address
	ToString() string
	InStreams() CUSP_InStream_Iterator
	OutStreams() CUSP_OutStream_Iterator
	QueuedOutOfOrder() int
	QueuedUnread() int
	QueuedInflight() int
	QueuedToRetransmit() int
	BytesReceived() int64
	BytesSent() int64
	LastReceive() int64
	LastSend() int64
}

type SwigcptrChannel uintptr

func (p SwigcptrChannel) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrChannel) SwigIsChannel() {
}

func _swig_wrap_Channel_address(SwigcptrChannel) SwigcptrAddress

func (arg1 SwigcptrChannel) Address() Address {
	return _swig_wrap_Channel_address(arg1)
}

func _swig_wrap_Channel_host(SwigcptrChannel) SwigcptrHost

func (arg1 SwigcptrChannel) Host() Host {
	return _swig_wrap_Channel_host(arg1)
}

func _swig_wrap_new_Channel(uintptr, uintptr) SwigcptrChannel

func NewChannel(arg1 Address, arg2 Host) Channel {
	return _swig_wrap_new_Channel(arg1.Swigcptr(), arg2.Swigcptr())
}

func _swig_wrap_delete_Channel(uintptr)

func DeleteChannel(arg1 Channel) {
	_swig_wrap_delete_Channel(arg1.Swigcptr())
}

type Channel interface {
	Swigcptr() uintptr
	SwigIsChannel()
	Address() Address
	Host() Host
}

type SwigcptrAbortable uintptr

func (p SwigcptrAbortable) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrAbortable) SwigIsAbortable() {
}

func _swig_wrap_new_Abortable__SWIG_0() SwigcptrAbortable

func NewAbortable__SWIG_0() Abortable {
	return _swig_wrap_new_Abortable__SWIG_0()
}

func _swig_wrap_new_Abortable__SWIG_1(uintptr) SwigcptrAbortable

func NewAbortable__SWIG_1(arg1 Abortable) Abortable {
	return _swig_wrap_new_Abortable__SWIG_1(arg1.Swigcptr())
}

func NewAbortable(a ...interface{}) Abortable {
	argc := len(a)
	if argc == 0 {
		return NewAbortable__SWIG_0()
	}
	if argc == 1 {
		return NewAbortable__SWIG_1(a[0].(Abortable))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Abortable(uintptr)

func DeleteAbortable(arg1 Abortable) {
	_swig_wrap_delete_Abortable(arg1.Swigcptr())
}

func _swig_wrap_Abortable_swap(SwigcptrAbortable, uintptr)

func (arg1 SwigcptrAbortable) Swap(arg2 Abortable) {
	_swig_wrap_Abortable_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_Abortable_isValid(SwigcptrAbortable) bool

func (arg1 SwigcptrAbortable) IsValid() bool {
	return _swig_wrap_Abortable_isValid(arg1)
}

func _swig_wrap_Abortable_abort(SwigcptrAbortable)

func (arg1 SwigcptrAbortable) Abort() {
	_swig_wrap_Abortable_abort(arg1)
}

type Abortable interface {
	Swigcptr() uintptr
	SwigIsAbortable()
	Swap(arg2 Abortable)
	IsValid() bool
	Abort()
}

type SwigcptrEndPoint uintptr

func (p SwigcptrEndPoint) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrEndPoint) SwigIsEndPoint() {
}

func _swig_wrap_EndPoint_create__SWIG_0(int, uintptr, bool, uintptr, uintptr) SwigcptrEndPoint

func EndPointCreate__SWIG_0(arg1 int, arg2 PrivateKey, arg3 bool, arg4 PublicKeySuiteSet, arg5 SymmetricSuiteSet) EndPoint {
	return _swig_wrap_EndPoint_create__SWIG_0(arg1, arg2.Swigcptr(), arg3, arg4.Swigcptr(), arg5.Swigcptr())
}

func _swig_wrap_EndPoint_create__SWIG_1(int, uintptr, bool, uintptr) SwigcptrEndPoint

func EndPointCreate__SWIG_1(arg1 int, arg2 PrivateKey, arg3 bool, arg4 PublicKeySuiteSet) EndPoint {
	return _swig_wrap_EndPoint_create__SWIG_1(arg1, arg2.Swigcptr(), arg3, arg4.Swigcptr())
}

func _swig_wrap_EndPoint_create__SWIG_2(int, uintptr, bool) SwigcptrEndPoint

func EndPointCreate__SWIG_2(arg1 int, arg2 PrivateKey, arg3 bool) EndPoint {
	return _swig_wrap_EndPoint_create__SWIG_2(arg1, arg2.Swigcptr(), arg3)
}

func _swig_wrap_EndPoint_create__SWIG_3(int, uintptr) SwigcptrEndPoint

func EndPointCreate__SWIG_3(arg1 int, arg2 PrivateKey) EndPoint {
	return _swig_wrap_EndPoint_create__SWIG_3(arg1, arg2.Swigcptr())
}

func _swig_wrap_EndPoint_create__SWIG_4(int) SwigcptrEndPoint

func EndPointCreate__SWIG_4(arg1 int) EndPoint {
	return _swig_wrap_EndPoint_create__SWIG_4(arg1)
}

func EndPointCreate(a ...interface{}) EndPoint {
	argc := len(a)
	if argc == 1 {
		return EndPointCreate__SWIG_4(a[0].(int))
	}
	if argc == 2 {
		return EndPointCreate__SWIG_3(a[0].(int), a[1].(PrivateKey))
	}
	if argc == 3 {
		return EndPointCreate__SWIG_2(a[0].(int), a[1].(PrivateKey), a[2].(bool))
	}
	if argc == 4 {
		return EndPointCreate__SWIG_1(a[0].(int), a[1].(PrivateKey), a[2].(bool), a[3].(PublicKeySuiteSet))
	}
	if argc == 5 {
		return EndPointCreate__SWIG_0(a[0].(int), a[1].(PrivateKey), a[2].(bool), a[3].(PublicKeySuiteSet), a[4].(SymmetricSuiteSet))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_new_EndPoint__SWIG_0() SwigcptrEndPoint

func NewEndPoint__SWIG_0() EndPoint {
	return _swig_wrap_new_EndPoint__SWIG_0()
}

func _swig_wrap_new_EndPoint__SWIG_1(uintptr) SwigcptrEndPoint

func NewEndPoint__SWIG_1(arg1 EndPoint) EndPoint {
	return _swig_wrap_new_EndPoint__SWIG_1(arg1.Swigcptr())
}

func NewEndPoint(a ...interface{}) EndPoint {
	argc := len(a)
	if argc == 0 {
		return NewEndPoint__SWIG_0()
	}
	if argc == 1 {
		return NewEndPoint__SWIG_1(a[0].(EndPoint))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_EndPoint(uintptr)

func DeleteEndPoint(arg1 EndPoint) {
	_swig_wrap_delete_EndPoint(arg1.Swigcptr())
}

func _swig_wrap_EndPoint_swap(SwigcptrEndPoint, uintptr)

func (arg1 SwigcptrEndPoint) Swap(arg2 EndPoint) {
	_swig_wrap_EndPoint_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_EndPoint_isValid(SwigcptrEndPoint) bool

func (arg1 SwigcptrEndPoint) IsValid() bool {
	return _swig_wrap_EndPoint_isValid(arg1)
}

func _swig_wrap_EndPoint_destroy(SwigcptrEndPoint)

func (arg1 SwigcptrEndPoint) Destroy() {
	_swig_wrap_EndPoint_destroy(arg1)
}

func _swig_wrap_EndPoint_whenSafeToDestroy(SwigcptrEndPoint, uintptr) SwigcptrAbortable

func (arg1 SwigcptrEndPoint) WhenSafeToDestroy(arg2 CUSP_EndPoint_SafeToDestroyHandler) Abortable {
	return _swig_wrap_EndPoint_whenSafeToDestroy(arg1, arg2.Swigcptr())
}

func _swig_wrap_EndPoint_setRate(SwigcptrEndPoint, int)

func (arg1 SwigcptrEndPoint) SetRate(arg2 int) {
	_swig_wrap_EndPoint_setRate(arg1, arg2)
}

func _swig_wrap_EndPoint_key(SwigcptrEndPoint) SwigcptrPrivateKey

func (arg1 SwigcptrEndPoint) Key() PrivateKey {
	return _swig_wrap_EndPoint_key(arg1)
}

func _swig_wrap_EndPoint_publicKeyStr(SwigcptrEndPoint, uintptr) string

func (arg1 SwigcptrEndPoint) PublicKeyStr(arg2 PublicKeySuite) string {
	return _swig_wrap_EndPoint_publicKeyStr(arg1, arg2.Swigcptr())
}

func _swig_wrap_EndPoint_bytesSent(SwigcptrEndPoint) int64

func (arg1 SwigcptrEndPoint) BytesSent() int64 {
	return _swig_wrap_EndPoint_bytesSent(arg1)
}

func _swig_wrap_EndPoint_bytesReceived(SwigcptrEndPoint) int64

func (arg1 SwigcptrEndPoint) BytesReceived() int64 {
	return _swig_wrap_EndPoint_bytesReceived(arg1)
}

func _swig_wrap_EndPoint_contact(SwigcptrEndPoint, uintptr, uint16, uintptr) SwigcptrAbortable

func (arg1 SwigcptrEndPoint) Contact(arg2 Address, arg3 uint16, arg4 CUSP_EndPoint_ContactHandler) Abortable {
	return _swig_wrap_EndPoint_contact(arg1, arg2.Swigcptr(), arg3, arg4.Swigcptr())
}

func _swig_wrap_EndPoint_hosts(SwigcptrEndPoint) SwigcptrCUSP_Host_Iterator

func (arg1 SwigcptrEndPoint) Hosts() CUSP_Host_Iterator {
	return _swig_wrap_EndPoint_hosts(arg1)
}

func _swig_wrap_EndPoint_channels(SwigcptrEndPoint) SwigcptrCUSP_Channel_Iterator

func (arg1 SwigcptrEndPoint) Channels() CUSP_Channel_Iterator {
	return _swig_wrap_EndPoint_channels(arg1)
}

func _swig_wrap_EndPoint_advertise(SwigcptrEndPoint, uint16, uintptr)

func (arg1 SwigcptrEndPoint) Advertise(arg2 uint16, arg3 CUSP_EndPoint_AdvertiseHandler) {
	_swig_wrap_EndPoint_advertise(arg1, arg2, arg3.Swigcptr())
}

func _swig_wrap_EndPoint_unadvertise(SwigcptrEndPoint, uint16)

func (arg1 SwigcptrEndPoint) Unadvertise(arg2 uint16) {
	_swig_wrap_EndPoint_unadvertise(arg1, arg2)
}

type EndPoint interface {
	Swigcptr() uintptr
	SwigIsEndPoint()
	Swap(arg2 EndPoint)
	IsValid() bool
	Destroy()
	WhenSafeToDestroy(arg2 CUSP_EndPoint_SafeToDestroyHandler) Abortable
	SetRate(arg2 int)
	Key() PrivateKey
	PublicKeyStr(arg2 PublicKeySuite) string
	BytesSent() int64
	BytesReceived() int64
	Contact(arg2 Address, arg3 uint16, arg4 CUSP_EndPoint_ContactHandler) Abortable
	Hosts() CUSP_Host_Iterator
	Channels() CUSP_Channel_Iterator
	Advertise(arg2 uint16, arg3 CUSP_EndPoint_AdvertiseHandler)
	Unadvertise(arg2 uint16)
}

type SwigcptrEvent uintptr

func (p SwigcptrEvent) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrEvent) SwigIsEvent() {
}

func _swig_wrap_Event_create(uintptr) SwigcptrEvent

func EventCreate(arg1 CUSP_Event_Handler) Event {
	return _swig_wrap_Event_create(arg1.Swigcptr())
}

func _swig_wrap_Event_schedule(int64, uintptr) SwigcptrEvent

func EventSchedule(arg1 int64, arg2 CUSP_Event_Handler) Event {
	return _swig_wrap_Event_schedule(arg1, arg2.Swigcptr())
}

func _swig_wrap_Event_scheduleIn(int64, uintptr) SwigcptrEvent

func EventScheduleIn(arg1 int64, arg2 CUSP_Event_Handler) Event {
	return _swig_wrap_Event_scheduleIn(arg1, arg2.Swigcptr())
}

func EventTime() int64
func _swig_wrap_new_Event__SWIG_0() SwigcptrEvent

func NewEvent__SWIG_0() Event {
	return _swig_wrap_new_Event__SWIG_0()
}

func _swig_wrap_new_Event__SWIG_1(uintptr) SwigcptrEvent

func NewEvent__SWIG_1(arg1 CUSP_Event_Handler) Event {
	return _swig_wrap_new_Event__SWIG_1(arg1.Swigcptr())
}

func _swig_wrap_new_Event__SWIG_2(uintptr) SwigcptrEvent

func NewEvent__SWIG_2(arg1 Event) Event {
	return _swig_wrap_new_Event__SWIG_2(arg1.Swigcptr())
}

func NewEvent(a ...interface{}) Event {
	argc := len(a)
	if argc == 0 {
		return NewEvent__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(SwigcptrCUSP_Event_Handler); !ok {
			goto check_2
		}
		return NewEvent__SWIG_1(a[0].(CUSP_Event_Handler))
	}
check_2:
	if argc == 1 {
		return NewEvent__SWIG_2(a[0].(Event))
	}
	panic("No match for overloaded function call")
}

func _swig_wrap_delete_Event(uintptr)

func DeleteEvent(arg1 Event) {
	_swig_wrap_delete_Event(arg1.Swigcptr())
}

func _swig_wrap_Event_swap(SwigcptrEvent, uintptr)

func (arg1 SwigcptrEvent) Swap(arg2 Event) {
	_swig_wrap_Event_swap(arg1, arg2.Swigcptr())
}

func _swig_wrap_Event_isValid(SwigcptrEvent) bool

func (arg1 SwigcptrEvent) IsValid() bool {
	return _swig_wrap_Event_isValid(arg1)
}

func _swig_wrap_Event_reschedule(SwigcptrEvent, int64)

func (arg1 SwigcptrEvent) Reschedule(arg2 int64) {
	_swig_wrap_Event_reschedule(arg1, arg2)
}

func _swig_wrap_Event_rescheduleIn(SwigcptrEvent, int64)

func (arg1 SwigcptrEvent) RescheduleIn(arg2 int64) {
	_swig_wrap_Event_rescheduleIn(arg1, arg2)
}

func _swig_wrap_Event_cancel(SwigcptrEvent)

func (arg1 SwigcptrEvent) Cancel() {
	_swig_wrap_Event_cancel(arg1)
}

func _swig_wrap_Event_timeOfExecution(SwigcptrEvent) int64

func (arg1 SwigcptrEvent) TimeOfExecution() int64 {
	return _swig_wrap_Event_timeOfExecution(arg1)
}

func _swig_wrap_Event_timeTillExecution(SwigcptrEvent) int64

func (arg1 SwigcptrEvent) TimeTillExecution() int64 {
	return _swig_wrap_Event_timeTillExecution(arg1)
}

func _swig_wrap_Event_isScheduled(SwigcptrEvent) bool

func (arg1 SwigcptrEvent) IsScheduled() bool {
	return _swig_wrap_Event_isScheduled(arg1)
}

type Event interface {
	Swigcptr() uintptr
	SwigIsEvent()
	Swap(arg2 Event)
	IsValid() bool
	Reschedule(arg2 int64)
	RescheduleIn(arg2 int64)
	Cancel()
	TimeOfExecution() int64
	TimeTillExecution() int64
	IsScheduled() bool
}


type SwigcptrVoid uintptr
type Void interface {
	Swigcptr() uintptr;
}
func (p SwigcptrVoid) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_OutStream_ShutdownHandler uintptr
type CUSP_OutStream_ShutdownHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_OutStream_ShutdownHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_OutStream_WriteHandler uintptr
type CUSP_OutStream_WriteHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_OutStream_WriteHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_InStream_ReadHandler uintptr
type CUSP_InStream_ReadHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_InStream_ReadHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_Host_ListenHandler uintptr
type CUSP_Host_ListenHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_Host_ListenHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_EndPoint_SafeToDestroyHandler uintptr
type CUSP_EndPoint_SafeToDestroyHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_EndPoint_SafeToDestroyHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_EndPoint_ContactHandler uintptr
type CUSP_EndPoint_ContactHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_EndPoint_ContactHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_EndPoint_AdvertiseHandler uintptr
type CUSP_EndPoint_AdvertiseHandler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_EndPoint_AdvertiseHandler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_Event_Handler uintptr
type CUSP_Event_Handler interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_Event_Handler) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_SymmetricSuiteSet_Iterator uintptr
type CUSP_SymmetricSuiteSet_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_SymmetricSuiteSet_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_PublicKeySuiteSet_Iterator uintptr
type CUSP_PublicKeySuiteSet_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_PublicKeySuiteSet_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_InStream_Iterator uintptr
type CUSP_InStream_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_InStream_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_OutStream_Iterator uintptr
type CUSP_OutStream_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_OutStream_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_Host_Iterator uintptr
type CUSP_Host_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_Host_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrCUSP_Channel_Iterator uintptr
type CUSP_Channel_Iterator interface {
	Swigcptr() uintptr;
}
func (p SwigcptrCUSP_Channel_Iterator) Swigcptr() uintptr {
	return uintptr(p)
}

