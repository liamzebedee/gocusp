/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct { char *p; int n; } _gostring_;
typedef struct { void* array; unsigned int len; unsigned int cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


  #include "../libcusp/cusp/cbindings/include/cusp.h"

#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_cuspInit__SWIG_0(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspInit();
  
}


void
_wrap_cuspInit__SWIG_1(void *swig_v)
{
  int arg1 ;
  char **arg2 = (char **) 0 ;
  
  struct swigargs {
    int arg1;
    char **arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = *(char ***)&swig_a->arg2; 
  
  CUSP::cuspInit(arg1,(char const **)arg2);
  
}


void
_wrap_cuspShutdown(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspShutdown();
  
}


void
_wrap_cuspMain(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspMain();
  
}


void
_wrap_cuspMainSigInt(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspMainSigInt();
  
}


void
_wrap_cuspMainRunning(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)CUSP::cuspMainRunning();
  swig_a->result = result; 
}


void
_wrap_cuspStopMain(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspStopMain();
  
}


void
_wrap_cuspProcessEvents(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  CUSP::cuspProcessEvents();
  
}


void
_wrap_new_InStream__SWIG_0(void *swig_v)
{
  CUSP::InStream *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::InStream *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::InStream *)new CUSP::InStream();
  *(CUSP::InStream **)&swig_a->result = result; 
}


void
_wrap_new_InStream__SWIG_1(void *swig_v)
{
  CUSP::InStream *arg1 = 0 ;
  CUSP::InStream *result = 0 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
    long : 0;
    CUSP::InStream *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  result = (CUSP::InStream *)new CUSP::InStream((CUSP::InStream const &)*arg1);
  *(CUSP::InStream **)&swig_a->result = result; 
}


void
_wrap_delete_InStream(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_InStream_swap(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  CUSP::InStream *arg2 = 0 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
    CUSP::InStream *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  arg2 = *(CUSP::InStream **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_InStream_isValid(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::InStream *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  result = (bool)((CUSP::InStream const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_InStream_read__SWIG_0(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  CUSP::InStream::ReadHandler *arg2 = (CUSP::InStream::ReadHandler *) 0 ;
  int arg3 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
    CUSP::InStream::ReadHandler *arg2;
    int arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  arg2 = *(CUSP::InStream::ReadHandler **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  (arg1)->read(arg2,arg3);
  
}


void
_wrap_InStream_read__SWIG_1(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  CUSP::InStream::ReadHandler *arg2 = (CUSP::InStream::ReadHandler *) 0 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
    CUSP::InStream::ReadHandler *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  arg2 = *(CUSP::InStream::ReadHandler **)&swig_a->arg2; 
  
  (arg1)->read(arg2);
  
}


void
_wrap_InStream_reset(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  
  struct swigargs {
    CUSP::InStream *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  (arg1)->reset();
  
}


void
_wrap_InStream_queuedOutOfOrder(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::InStream *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  result = (int)((CUSP::InStream const *)arg1)->queuedOutOfOrder();
  swig_a->result = result; 
}


void
_wrap_InStream_queuedUnread(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::InStream *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  result = (int)((CUSP::InStream const *)arg1)->queuedUnread();
  swig_a->result = result; 
}


void
_wrap_InStream_bytesReceived(void *swig_v)
{
  CUSP::InStream *arg1 = (CUSP::InStream *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::InStream *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::InStream **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::InStream const *)arg1)->bytesReceived();
  swig_a->result = result; 
}


void
_wrap_new_OutStream__SWIG_0(void *swig_v)
{
  CUSP::OutStream *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::OutStream *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::OutStream *)new CUSP::OutStream();
  *(CUSP::OutStream **)&swig_a->result = result; 
}


void
_wrap_new_OutStream__SWIG_1(void *swig_v)
{
  CUSP::OutStream *arg1 = 0 ;
  CUSP::OutStream *result = 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    CUSP::OutStream *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (CUSP::OutStream *)new CUSP::OutStream((CUSP::OutStream const &)*arg1);
  *(CUSP::OutStream **)&swig_a->result = result; 
}


void
_wrap_delete_OutStream(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OutStream_swap(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  CUSP::OutStream *arg2 = 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    CUSP::OutStream *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  arg2 = *(CUSP::OutStream **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_OutStream_isValid(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (bool)((CUSP::OutStream const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_OutStream_getPriority(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  float result;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (float)(arg1)->getPriority();
  swig_a->result = result; 
}


void
_wrap_OutStream_setPriority(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  float arg2 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    float arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  arg2 = (float)swig_a->arg2; 
  
  (arg1)->setPriority(arg2);
  
}


void
_wrap_OutStream_write(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  CUSP::OutStream::WriteHandler *arg4 = (CUSP::OutStream::WriteHandler *) 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    void *arg2;
    int arg3;
    CUSP::OutStream::WriteHandler *arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = *(CUSP::OutStream::WriteHandler **)&swig_a->arg4; 
  
  (arg1)->write((void const *)arg2,arg3,arg4);
  
}


void
_wrap_OutStream_shutdown(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  CUSP::OutStream::ShutdownHandler *arg2 = (CUSP::OutStream::ShutdownHandler *) 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    CUSP::OutStream::ShutdownHandler *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  arg2 = *(CUSP::OutStream::ShutdownHandler **)&swig_a->arg2; 
  
  (arg1)->shutdown(arg2);
  
}


void
_wrap_OutStream_reset(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  
  struct swigargs {
    CUSP::OutStream *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  (arg1)->reset();
  
}


void
_wrap_OutStream_queuedInflight(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (int)((CUSP::OutStream const *)arg1)->queuedInflight();
  swig_a->result = result; 
}


void
_wrap_OutStream_queuedToRetransmit(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (int)((CUSP::OutStream const *)arg1)->queuedToRetransmit();
  swig_a->result = result; 
}


void
_wrap_OutStream_bytesSent(void *swig_v)
{
  CUSP::OutStream *arg1 = (CUSP::OutStream *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::OutStream *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::OutStream **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::OutStream const *)arg1)->bytesSent();
  swig_a->result = result; 
}


void
_wrap_Address_fromString(void *swig_v)
{
  std::string *arg1 = 0 ;
  CUSP::Address result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    CUSP::Address *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = CUSP::Address::fromString((std::string const &)*arg1);
  *(CUSP::Address **)&swig_a->result = new CUSP::Address(result); 
}


void
_wrap_new_Address__SWIG_0(void *swig_v)
{
  CUSP::Address *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::Address *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::Address *)new CUSP::Address();
  *(CUSP::Address **)&swig_a->result = result; 
}


void
_wrap_new_Address__SWIG_1(void *swig_v)
{
  CUSP::Address *arg1 = 0 ;
  CUSP::Address *result = 0 ;
  
  struct swigargs {
    CUSP::Address *arg1;
    long : 0;
    CUSP::Address *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  
  result = (CUSP::Address *)new CUSP::Address((CUSP::Address const &)*arg1);
  *(CUSP::Address **)&swig_a->result = result; 
}


void
_wrap_delete_Address(void *swig_v)
{
  CUSP::Address *arg1 = (CUSP::Address *) 0 ;
  
  struct swigargs {
    CUSP::Address *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Address_swap(void *swig_v)
{
  CUSP::Address *arg1 = (CUSP::Address *) 0 ;
  CUSP::Address *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Address *arg1;
    CUSP::Address *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  arg2 = *(CUSP::Address **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_Address_isValid(void *swig_v)
{
  CUSP::Address *arg1 = (CUSP::Address *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::Address *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  
  result = (bool)((CUSP::Address const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_Address_toString(void *swig_v)
{
  CUSP::Address *arg1 = (CUSP::Address *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::Address *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  
  result = ((CUSP::Address const *)arg1)->toString();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_PublicKeySuite_isValid(void *swig_v)
{
  CUSP::PublicKeySuite *arg1 = (CUSP::PublicKeySuite *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::PublicKeySuite *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuite **)&swig_a->arg1; 
  
  result = (bool)((CUSP::PublicKeySuite const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_PublicKeySuite_name(void *swig_v)
{
  CUSP::PublicKeySuite *arg1 = (CUSP::PublicKeySuite *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::PublicKeySuite *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuite **)&swig_a->arg1; 
  
  result = ((CUSP::PublicKeySuite const *)arg1)->name();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_PublicKeySuite_cost(void *swig_v)
{
  CUSP::PublicKeySuite *arg1 = (CUSP::PublicKeySuite *) 0 ;
  float result;
  
  struct swigargs {
    CUSP::PublicKeySuite *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuite **)&swig_a->arg1; 
  
  result = (float)((CUSP::PublicKeySuite const *)arg1)->cost();
  swig_a->result = result; 
}


void
_wrap_delete_PublicKeySuite(void *swig_v)
{
  CUSP::PublicKeySuite *arg1 = (CUSP::PublicKeySuite *) 0 ;
  
  struct swigargs {
    CUSP::PublicKeySuite *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuite **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_PublicKeySuiteSet_all(void *swig_v)
{
  SwigValueWrapper< CUSP::PublicKeySuiteSet > result;
  
  struct swigargs {
    long : 0;
    CUSP::PublicKeySuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSP::PublicKeySuiteSet::all();
  *(CUSP::PublicKeySuiteSet **)&swig_a->result = new CUSP::PublicKeySuiteSet(result); 
}


void
_wrap_PublicKeySuiteSet_defaults(void *swig_v)
{
  SwigValueWrapper< CUSP::PublicKeySuiteSet > result;
  
  struct swigargs {
    long : 0;
    CUSP::PublicKeySuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSP::PublicKeySuiteSet::defaults();
  *(CUSP::PublicKeySuiteSet **)&swig_a->result = new CUSP::PublicKeySuiteSet(result); 
}


void
_wrap_PublicKeySuiteSet_isEmpty(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  result = (bool)((CUSP::PublicKeySuiteSet const *)arg1)->isEmpty();
  swig_a->result = result; 
}


void
_wrap_PublicKeySuiteSet_contains(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  SwigValueWrapper< CUSP::PublicKeySuite > arg2 ;
  CUSP::PublicKeySuite *argp2 ;
  bool result;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
    CUSP::PublicKeySuite *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  argp2 = (CUSP::PublicKeySuite *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuite");
  }
  arg2 = (CUSP::PublicKeySuite)*argp2;
  
  
  result = (bool)((CUSP::PublicKeySuiteSet const *)arg1)->contains(arg2);
  swig_a->result = result; 
}


void
_wrap_PublicKeySuiteSet_element(void *swig_v)
{
  SwigValueWrapper< CUSP::PublicKeySuite > arg1 ;
  CUSP::PublicKeySuite *argp1 ;
  SwigValueWrapper< CUSP::PublicKeySuiteSet > result;
  
  struct swigargs {
    CUSP::PublicKeySuite *arg1;
    long : 0;
    CUSP::PublicKeySuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  argp1 = (CUSP::PublicKeySuite *)swig_a->arg1;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuite");
  }
  arg1 = (CUSP::PublicKeySuite)*argp1;
  
  
  result = CUSP::PublicKeySuiteSet::element(arg1);
  *(CUSP::PublicKeySuiteSet **)&swig_a->result = new CUSP::PublicKeySuiteSet(result); 
}


void
_wrap_PublicKeySuiteSet_cheapest(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  SwigValueWrapper< CUSP::PublicKeySuite > result;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
    long : 0;
    CUSP::PublicKeySuite *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  result = ((CUSP::PublicKeySuiteSet const *)arg1)->cheapest();
  *(CUSP::PublicKeySuite **)&swig_a->result = new CUSP::PublicKeySuite(result); 
}


void
_wrap_PublicKeySuiteSet_iterator(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  CUSP::PublicKeySuiteSet::Iterator result;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
    long : 0;
    CUSP::PublicKeySuiteSet::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  result = ((CUSP::PublicKeySuiteSet const *)arg1)->iterator();
  *(CUSP::PublicKeySuiteSet::Iterator **)&swig_a->result = new CUSP::PublicKeySuiteSet::Iterator(result); 
}


void
_wrap_PublicKeySuiteSet_toMask(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  uint16_t result;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  result = (uint16_t)((CUSP::PublicKeySuiteSet const *)arg1)->toMask();
  swig_a->result = result; 
}


void
_wrap_PublicKeySuiteSet_fromMask(void *swig_v)
{
  uint16_t arg1 ;
  SwigValueWrapper< CUSP::PublicKeySuiteSet > result;
  
  struct swigargs {
    short arg1;
    long : 0;
    CUSP::PublicKeySuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint16_t)swig_a->arg1; 
  
  result = CUSP::PublicKeySuiteSet::fromMask(arg1);
  *(CUSP::PublicKeySuiteSet **)&swig_a->result = new CUSP::PublicKeySuiteSet(result); 
}


void
_wrap_delete_PublicKeySuiteSet(void *swig_v)
{
  CUSP::PublicKeySuiteSet *arg1 = (CUSP::PublicKeySuiteSet *) 0 ;
  
  struct swigargs {
    CUSP::PublicKeySuiteSet *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKeySuiteSet **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SymmetricSuite_isValid(void *swig_v)
{
  CUSP::SymmetricSuite *arg1 = (CUSP::SymmetricSuite *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::SymmetricSuite *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuite **)&swig_a->arg1; 
  
  result = (bool)((CUSP::SymmetricSuite const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_SymmetricSuite_name(void *swig_v)
{
  CUSP::SymmetricSuite *arg1 = (CUSP::SymmetricSuite *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::SymmetricSuite *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuite **)&swig_a->arg1; 
  
  result = ((CUSP::SymmetricSuite const *)arg1)->name();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_SymmetricSuite_cost(void *swig_v)
{
  CUSP::SymmetricSuite *arg1 = (CUSP::SymmetricSuite *) 0 ;
  float result;
  
  struct swigargs {
    CUSP::SymmetricSuite *arg1;
    long : 0;
    float result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuite **)&swig_a->arg1; 
  
  result = (float)((CUSP::SymmetricSuite const *)arg1)->cost();
  swig_a->result = result; 
}


void
_wrap_delete_SymmetricSuite(void *swig_v)
{
  CUSP::SymmetricSuite *arg1 = (CUSP::SymmetricSuite *) 0 ;
  
  struct swigargs {
    CUSP::SymmetricSuite *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuite **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_SymmetricSuiteSet_all(void *swig_v)
{
  SwigValueWrapper< CUSP::SymmetricSuiteSet > result;
  
  struct swigargs {
    long : 0;
    CUSP::SymmetricSuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSP::SymmetricSuiteSet::all();
  *(CUSP::SymmetricSuiteSet **)&swig_a->result = new CUSP::SymmetricSuiteSet(result); 
}


void
_wrap_SymmetricSuiteSet_defaults(void *swig_v)
{
  SwigValueWrapper< CUSP::SymmetricSuiteSet > result;
  
  struct swigargs {
    long : 0;
    CUSP::SymmetricSuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSP::SymmetricSuiteSet::defaults();
  *(CUSP::SymmetricSuiteSet **)&swig_a->result = new CUSP::SymmetricSuiteSet(result); 
}


void
_wrap_SymmetricSuiteSet_isEmpty(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  result = (bool)((CUSP::SymmetricSuiteSet const *)arg1)->isEmpty();
  swig_a->result = result; 
}


void
_wrap_SymmetricSuiteSet_contains(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  SwigValueWrapper< CUSP::SymmetricSuite > arg2 ;
  CUSP::SymmetricSuite *argp2 ;
  bool result;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
    CUSP::SymmetricSuite *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  argp2 = (CUSP::SymmetricSuite *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::SymmetricSuite");
  }
  arg2 = (CUSP::SymmetricSuite)*argp2;
  
  
  result = (bool)((CUSP::SymmetricSuiteSet const *)arg1)->contains(arg2);
  swig_a->result = result; 
}


void
_wrap_SymmetricSuiteSet_element(void *swig_v)
{
  SwigValueWrapper< CUSP::SymmetricSuite > arg1 ;
  CUSP::SymmetricSuite *argp1 ;
  SwigValueWrapper< CUSP::SymmetricSuiteSet > result;
  
  struct swigargs {
    CUSP::SymmetricSuite *arg1;
    long : 0;
    CUSP::SymmetricSuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  argp1 = (CUSP::SymmetricSuite *)swig_a->arg1;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::SymmetricSuite");
  }
  arg1 = (CUSP::SymmetricSuite)*argp1;
  
  
  result = CUSP::SymmetricSuiteSet::element(arg1);
  *(CUSP::SymmetricSuiteSet **)&swig_a->result = new CUSP::SymmetricSuiteSet(result); 
}


void
_wrap_SymmetricSuiteSet_cheapest(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  SwigValueWrapper< CUSP::SymmetricSuite > result;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
    long : 0;
    CUSP::SymmetricSuite *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  result = ((CUSP::SymmetricSuiteSet const *)arg1)->cheapest();
  *(CUSP::SymmetricSuite **)&swig_a->result = new CUSP::SymmetricSuite(result); 
}


void
_wrap_SymmetricSuiteSet_iterator(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  CUSP::SymmetricSuiteSet::Iterator result;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
    long : 0;
    CUSP::SymmetricSuiteSet::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  result = ((CUSP::SymmetricSuiteSet const *)arg1)->iterator();
  *(CUSP::SymmetricSuiteSet::Iterator **)&swig_a->result = new CUSP::SymmetricSuiteSet::Iterator(result); 
}


void
_wrap_SymmetricSuiteSet_toMask(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  uint16_t result;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  result = (uint16_t)((CUSP::SymmetricSuiteSet const *)arg1)->toMask();
  swig_a->result = result; 
}


void
_wrap_SymmetricSuiteSet_fromMask(void *swig_v)
{
  uint16_t arg1 ;
  SwigValueWrapper< CUSP::SymmetricSuiteSet > result;
  
  struct swigargs {
    short arg1;
    long : 0;
    CUSP::SymmetricSuiteSet *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint16_t)swig_a->arg1; 
  
  result = CUSP::SymmetricSuiteSet::fromMask(arg1);
  *(CUSP::SymmetricSuiteSet **)&swig_a->result = new CUSP::SymmetricSuiteSet(result); 
}


void
_wrap_delete_SymmetricSuiteSet(void *swig_v)
{
  CUSP::SymmetricSuiteSet *arg1 = (CUSP::SymmetricSuiteSet *) 0 ;
  
  struct swigargs {
    CUSP::SymmetricSuiteSet *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::SymmetricSuiteSet **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_PublicKey__SWIG_0(void *swig_v)
{
  CUSP::PublicKey *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::PublicKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::PublicKey *)new CUSP::PublicKey();
  *(CUSP::PublicKey **)&swig_a->result = result; 
}


void
_wrap_new_PublicKey__SWIG_1(void *swig_v)
{
  CUSP::PublicKey *arg1 = 0 ;
  CUSP::PublicKey *result = 0 ;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
    long : 0;
    CUSP::PublicKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  
  result = (CUSP::PublicKey *)new CUSP::PublicKey((CUSP::PublicKey const &)*arg1);
  *(CUSP::PublicKey **)&swig_a->result = result; 
}


void
_wrap_delete_PublicKey(void *swig_v)
{
  CUSP::PublicKey *arg1 = (CUSP::PublicKey *) 0 ;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_PublicKey_swap(void *swig_v)
{
  CUSP::PublicKey *arg1 = (CUSP::PublicKey *) 0 ;
  CUSP::PublicKey *arg2 = 0 ;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
    CUSP::PublicKey *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  arg2 = *(CUSP::PublicKey **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_PublicKey_isValid(void *swig_v)
{
  CUSP::PublicKey *arg1 = (CUSP::PublicKey *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  
  result = (bool)((CUSP::PublicKey const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_PublicKey_toString(void *swig_v)
{
  CUSP::PublicKey *arg1 = (CUSP::PublicKey *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  
  result = ((CUSP::PublicKey const *)arg1)->toString();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_PublicKey_suite(void *swig_v)
{
  CUSP::PublicKey *arg1 = (CUSP::PublicKey *) 0 ;
  SwigValueWrapper< CUSP::PublicKeySuite > result;
  
  struct swigargs {
    CUSP::PublicKey *arg1;
    long : 0;
    CUSP::PublicKeySuite *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PublicKey **)&swig_a->arg1; 
  
  result = ((CUSP::PublicKey const *)arg1)->suite();
  *(CUSP::PublicKeySuite **)&swig_a->result = new CUSP::PublicKeySuite(result); 
}


void
_wrap_new_PrivateKey__SWIG_0(void *swig_v)
{
  CUSP::PrivateKey *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::PrivateKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::PrivateKey *)new CUSP::PrivateKey();
  *(CUSP::PrivateKey **)&swig_a->result = result; 
}


void
_wrap_new_PrivateKey__SWIG_1(void *swig_v)
{
  CUSP::PrivateKey *arg1 = 0 ;
  CUSP::PrivateKey *result = 0 ;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
    long : 0;
    CUSP::PrivateKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  
  result = (CUSP::PrivateKey *)new CUSP::PrivateKey((CUSP::PrivateKey const &)*arg1);
  *(CUSP::PrivateKey **)&swig_a->result = result; 
}


void
_wrap_delete_PrivateKey(void *swig_v)
{
  CUSP::PrivateKey *arg1 = (CUSP::PrivateKey *) 0 ;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_PrivateKey_swap(void *swig_v)
{
  CUSP::PrivateKey *arg1 = (CUSP::PrivateKey *) 0 ;
  CUSP::PrivateKey *arg2 = 0 ;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
    CUSP::PrivateKey *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  arg2 = *(CUSP::PrivateKey **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_PrivateKey_isValid(void *swig_v)
{
  CUSP::PrivateKey *arg1 = (CUSP::PrivateKey *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  
  result = (bool)((CUSP::PrivateKey const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_PrivateKey_create(void *swig_v)
{
  CUSP::PrivateKey result;
  
  struct swigargs {
    long : 0;
    CUSP::PrivateKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = CUSP::PrivateKey::create();
  *(CUSP::PrivateKey **)&swig_a->result = new CUSP::PrivateKey(result); 
}


void
_wrap_PrivateKey_save(void *swig_v)
{
  CUSP::PrivateKey *arg1 = (CUSP::PrivateKey *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = ((CUSP::PrivateKey const *)arg1)->save((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_PrivateKey_load(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string arg2 ;
  CUSP::PrivateKey result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    CUSP::PrivateKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = CUSP::PrivateKey::load((std::string const &)*arg1,arg2);
  *(CUSP::PrivateKey **)&swig_a->result = new CUSP::PrivateKey(result); 
}


void
_wrap_PrivateKey_pubkey(void *swig_v)
{
  CUSP::PrivateKey *arg1 = (CUSP::PrivateKey *) 0 ;
  SwigValueWrapper< CUSP::PublicKeySuite > arg2 ;
  CUSP::PublicKeySuite *argp2 ;
  CUSP::PublicKey result;
  
  struct swigargs {
    CUSP::PrivateKey *arg1;
    CUSP::PublicKeySuite *arg2;
    long : 0;
    CUSP::PublicKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::PrivateKey **)&swig_a->arg1; 
  
  argp2 = (CUSP::PublicKeySuite *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuite");
  }
  arg2 = (CUSP::PublicKeySuite)*argp2;
  
  
  result = ((CUSP::PrivateKey const *)arg1)->pubkey(arg2);
  *(CUSP::PublicKey **)&swig_a->result = new CUSP::PublicKey(result); 
}


void
_wrap_new_Host__SWIG_0(void *swig_v)
{
  CUSP::Host *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::Host *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::Host *)new CUSP::Host();
  *(CUSP::Host **)&swig_a->result = result; 
}


void
_wrap_new_Host__SWIG_1(void *swig_v)
{
  CUSP::Host *arg1 = 0 ;
  CUSP::Host *result = 0 ;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    CUSP::Host *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (CUSP::Host *)new CUSP::Host((CUSP::Host const &)*arg1);
  *(CUSP::Host **)&swig_a->result = result; 
}


void
_wrap_delete_Host(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  
  struct swigargs {
    CUSP::Host *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Host_swap(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::Host *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Host *arg1;
    CUSP::Host *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  arg2 = *(CUSP::Host **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_Host_isValid(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (bool)((CUSP::Host const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_Host_connect(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::ServiceId arg2 ;
  CUSP::OutStream result;
  
  struct swigargs {
    CUSP::Host *arg1;
    short arg2;
    long : 0;
    CUSP::OutStream *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  arg2 = (CUSP::ServiceId)swig_a->arg2; 
  
  result = (arg1)->connect(arg2);
  *(CUSP::OutStream **)&swig_a->result = new CUSP::OutStream(result); 
}


void
_wrap_Host_listen(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::Host::ListenHandler *arg2 = (CUSP::Host::ListenHandler *) 0 ;
  CUSP::ServiceId result;
  
  struct swigargs {
    CUSP::Host *arg1;
    CUSP::Host::ListenHandler *arg2;
    long : 0;
    short result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  arg2 = *(CUSP::Host::ListenHandler **)&swig_a->arg2; 
  
  result = (CUSP::ServiceId)(arg1)->listen(arg2);
  swig_a->result = result; 
}


void
_wrap_Host_unlisten(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::ServiceId arg2 ;
  
  struct swigargs {
    CUSP::Host *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  arg2 = (CUSP::ServiceId)swig_a->arg2; 
  
  (arg1)->unlisten(arg2);
  
}


void
_wrap_Host_key(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::PublicKey result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    CUSP::PublicKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->key();
  *(CUSP::PublicKey **)&swig_a->result = new CUSP::PublicKey(result); 
}


void
_wrap_Host_keyStr(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->keyStr();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Host_address(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::Address result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    CUSP::Address *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->address();
  *(CUSP::Address **)&swig_a->result = new CUSP::Address(result); 
}


void
_wrap_Host_toString(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  std::string result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->toString();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Host_inStreams(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::InStream::Iterator result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    CUSP::InStream::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->inStreams();
  *(CUSP::InStream::Iterator **)&swig_a->result = new CUSP::InStream::Iterator(result); 
}


void
_wrap_Host_outStreams(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::OutStream::Iterator result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    CUSP::OutStream::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = ((CUSP::Host const *)arg1)->outStreams();
  *(CUSP::OutStream::Iterator **)&swig_a->result = new CUSP::OutStream::Iterator(result); 
}


void
_wrap_Host_queuedOutOfOrder(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int)((CUSP::Host const *)arg1)->queuedOutOfOrder();
  swig_a->result = result; 
}


void
_wrap_Host_queuedUnread(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int)((CUSP::Host const *)arg1)->queuedUnread();
  swig_a->result = result; 
}


void
_wrap_Host_queuedInflight(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int)((CUSP::Host const *)arg1)->queuedInflight();
  swig_a->result = result; 
}


void
_wrap_Host_queuedToRetransmit(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int)((CUSP::Host const *)arg1)->queuedToRetransmit();
  swig_a->result = result; 
}


void
_wrap_Host_bytesReceived(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::Host const *)arg1)->bytesReceived();
  swig_a->result = result; 
}


void
_wrap_Host_bytesSent(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::Host const *)arg1)->bytesSent();
  swig_a->result = result; 
}


void
_wrap_Host_lastReceive(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::Time result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (CUSP::Time)((CUSP::Host const *)arg1)->lastReceive();
  swig_a->result = result; 
}


void
_wrap_Host_lastSend(void *swig_v)
{
  CUSP::Host *arg1 = (CUSP::Host *) 0 ;
  CUSP::Time result;
  
  struct swigargs {
    CUSP::Host *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Host **)&swig_a->arg1; 
  
  result = (CUSP::Time)((CUSP::Host const *)arg1)->lastSend();
  swig_a->result = result; 
}


void
_wrap_Channel_address(void *swig_v)
{
  CUSP::Channel *arg1 = (CUSP::Channel *) 0 ;
  CUSP::Address result;
  
  struct swigargs {
    CUSP::Channel *arg1;
    long : 0;
    CUSP::Address *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Channel **)&swig_a->arg1; 
  
  result = ((CUSP::Channel const *)arg1)->address();
  *(CUSP::Address **)&swig_a->result = new CUSP::Address(result); 
}


void
_wrap_Channel_host(void *swig_v)
{
  CUSP::Channel *arg1 = (CUSP::Channel *) 0 ;
  CUSP::Host result;
  
  struct swigargs {
    CUSP::Channel *arg1;
    long : 0;
    CUSP::Host *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Channel **)&swig_a->arg1; 
  
  result = ((CUSP::Channel const *)arg1)->host();
  *(CUSP::Host **)&swig_a->result = new CUSP::Host(result); 
}


void
_wrap_new_Channel(void *swig_v)
{
  CUSP::Address *arg1 = 0 ;
  CUSP::Host *arg2 = 0 ;
  CUSP::Channel *result = 0 ;
  
  struct swigargs {
    CUSP::Address *arg1;
    CUSP::Host *arg2;
    long : 0;
    CUSP::Channel *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Address **)&swig_a->arg1; 
  arg2 = *(CUSP::Host **)&swig_a->arg2; 
  
  result = (CUSP::Channel *)new CUSP::Channel(*arg1,*arg2);
  *(CUSP::Channel **)&swig_a->result = result; 
}


void
_wrap_delete_Channel(void *swig_v)
{
  CUSP::Channel *arg1 = (CUSP::Channel *) 0 ;
  
  struct swigargs {
    CUSP::Channel *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Channel **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_Abortable__SWIG_0(void *swig_v)
{
  CUSP::Abortable *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::Abortable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::Abortable *)new CUSP::Abortable();
  *(CUSP::Abortable **)&swig_a->result = result; 
}


void
_wrap_new_Abortable__SWIG_1(void *swig_v)
{
  CUSP::Abortable *arg1 = 0 ;
  CUSP::Abortable *result = 0 ;
  
  struct swigargs {
    CUSP::Abortable *arg1;
    long : 0;
    CUSP::Abortable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Abortable **)&swig_a->arg1; 
  
  result = (CUSP::Abortable *)new CUSP::Abortable((CUSP::Abortable const &)*arg1);
  *(CUSP::Abortable **)&swig_a->result = result; 
}


void
_wrap_delete_Abortable(void *swig_v)
{
  CUSP::Abortable *arg1 = (CUSP::Abortable *) 0 ;
  
  struct swigargs {
    CUSP::Abortable *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Abortable **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Abortable_swap(void *swig_v)
{
  CUSP::Abortable *arg1 = (CUSP::Abortable *) 0 ;
  CUSP::Abortable *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Abortable *arg1;
    CUSP::Abortable *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Abortable **)&swig_a->arg1; 
  arg2 = *(CUSP::Abortable **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_Abortable_isValid(void *swig_v)
{
  CUSP::Abortable *arg1 = (CUSP::Abortable *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::Abortable *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Abortable **)&swig_a->arg1; 
  
  result = (bool)((CUSP::Abortable const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_Abortable_abort(void *swig_v)
{
  CUSP::Abortable *arg1 = (CUSP::Abortable *) 0 ;
  
  struct swigargs {
    CUSP::Abortable *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Abortable **)&swig_a->arg1; 
  
  (arg1)->abort();
  
}


void
_wrap_EndPoint_create__SWIG_0(void *swig_v)
{
  int arg1 ;
  CUSP::PrivateKey arg2 ;
  bool arg3 ;
  SwigValueWrapper< CUSP::PublicKeySuiteSet > arg4 ;
  SwigValueWrapper< CUSP::SymmetricSuiteSet > arg5 ;
  CUSP::PrivateKey *argp2 ;
  CUSP::PublicKeySuiteSet *argp4 ;
  CUSP::SymmetricSuiteSet *argp5 ;
  CUSP::EndPoint result;
  
  struct swigargs {
    int arg1;
    CUSP::PrivateKey *arg2;
    bool arg3;
    CUSP::PublicKeySuiteSet *arg4;
    CUSP::SymmetricSuiteSet *arg5;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  argp2 = (CUSP::PrivateKey *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PrivateKey");
  }
  arg2 = (CUSP::PrivateKey)*argp2;
  
  arg3 = (bool)swig_a->arg3; 
  
  argp4 = (CUSP::PublicKeySuiteSet *)swig_a->arg4;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuiteSet");
  }
  arg4 = (CUSP::PublicKeySuiteSet)*argp4;
  
  
  argp5 = (CUSP::SymmetricSuiteSet *)swig_a->arg5;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::SymmetricSuiteSet");
  }
  arg5 = (CUSP::SymmetricSuiteSet)*argp5;
  
  
  result = CUSP::EndPoint::create(arg1,arg2,arg3,arg4,arg5);
  *(CUSP::EndPoint **)&swig_a->result = new CUSP::EndPoint(result); 
}


void
_wrap_EndPoint_create__SWIG_1(void *swig_v)
{
  int arg1 ;
  CUSP::PrivateKey arg2 ;
  bool arg3 ;
  SwigValueWrapper< CUSP::PublicKeySuiteSet > arg4 ;
  CUSP::PrivateKey *argp2 ;
  CUSP::PublicKeySuiteSet *argp4 ;
  CUSP::EndPoint result;
  
  struct swigargs {
    int arg1;
    CUSP::PrivateKey *arg2;
    bool arg3;
    CUSP::PublicKeySuiteSet *arg4;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  argp2 = (CUSP::PrivateKey *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PrivateKey");
  }
  arg2 = (CUSP::PrivateKey)*argp2;
  
  arg3 = (bool)swig_a->arg3; 
  
  argp4 = (CUSP::PublicKeySuiteSet *)swig_a->arg4;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuiteSet");
  }
  arg4 = (CUSP::PublicKeySuiteSet)*argp4;
  
  
  result = CUSP::EndPoint::create(arg1,arg2,arg3,arg4);
  *(CUSP::EndPoint **)&swig_a->result = new CUSP::EndPoint(result); 
}


void
_wrap_EndPoint_create__SWIG_2(void *swig_v)
{
  int arg1 ;
  CUSP::PrivateKey arg2 ;
  bool arg3 ;
  CUSP::PrivateKey *argp2 ;
  CUSP::EndPoint result;
  
  struct swigargs {
    int arg1;
    CUSP::PrivateKey *arg2;
    bool arg3;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  argp2 = (CUSP::PrivateKey *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PrivateKey");
  }
  arg2 = (CUSP::PrivateKey)*argp2;
  
  arg3 = (bool)swig_a->arg3; 
  
  result = CUSP::EndPoint::create(arg1,arg2,arg3);
  *(CUSP::EndPoint **)&swig_a->result = new CUSP::EndPoint(result); 
}


void
_wrap_EndPoint_create__SWIG_3(void *swig_v)
{
  int arg1 ;
  CUSP::PrivateKey arg2 ;
  CUSP::PrivateKey *argp2 ;
  CUSP::EndPoint result;
  
  struct swigargs {
    int arg1;
    CUSP::PrivateKey *arg2;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  argp2 = (CUSP::PrivateKey *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PrivateKey");
  }
  arg2 = (CUSP::PrivateKey)*argp2;
  
  
  result = CUSP::EndPoint::create(arg1,arg2);
  *(CUSP::EndPoint **)&swig_a->result = new CUSP::EndPoint(result); 
}


void
_wrap_EndPoint_create__SWIG_4(void *swig_v)
{
  int arg1 ;
  CUSP::EndPoint result;
  
  struct swigargs {
    int arg1;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = CUSP::EndPoint::create(arg1);
  *(CUSP::EndPoint **)&swig_a->result = new CUSP::EndPoint(result); 
}


void
_wrap_new_EndPoint__SWIG_0(void *swig_v)
{
  CUSP::EndPoint *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::EndPoint *)new CUSP::EndPoint();
  *(CUSP::EndPoint **)&swig_a->result = result; 
}


void
_wrap_new_EndPoint__SWIG_1(void *swig_v)
{
  CUSP::EndPoint *arg1 = 0 ;
  CUSP::EndPoint *result = 0 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    CUSP::EndPoint *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = (CUSP::EndPoint *)new CUSP::EndPoint((CUSP::EndPoint const &)*arg1);
  *(CUSP::EndPoint **)&swig_a->result = result; 
}


void
_wrap_delete_EndPoint(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_EndPoint_swap(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::EndPoint *arg2 = 0 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    CUSP::EndPoint *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = *(CUSP::EndPoint **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_EndPoint_isValid(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = (bool)((CUSP::EndPoint const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_EndPoint_destroy(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  (arg1)->destroy();
  
}


void
_wrap_EndPoint_whenSafeToDestroy(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::EndPoint::SafeToDestroyHandler *arg2 = (CUSP::EndPoint::SafeToDestroyHandler *) 0 ;
  CUSP::Abortable result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    CUSP::EndPoint::SafeToDestroyHandler *arg2;
    long : 0;
    CUSP::Abortable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = *(CUSP::EndPoint::SafeToDestroyHandler **)&swig_a->arg2; 
  
  result = ((CUSP::EndPoint const *)arg1)->whenSafeToDestroy(arg2);
  *(CUSP::Abortable **)&swig_a->result = new CUSP::Abortable(result); 
}


void
_wrap_EndPoint_setRate(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  int arg2 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  (arg1)->setRate(arg2);
  
}


void
_wrap_EndPoint_key(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::PrivateKey result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    CUSP::PrivateKey *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = ((CUSP::EndPoint const *)arg1)->key();
  *(CUSP::PrivateKey **)&swig_a->result = new CUSP::PrivateKey(result); 
}


void
_wrap_EndPoint_publicKeyStr(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  SwigValueWrapper< CUSP::PublicKeySuite > arg2 ;
  CUSP::PublicKeySuite *argp2 ;
  std::string result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    CUSP::PublicKeySuite *arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  argp2 = (CUSP::PublicKeySuite *)swig_a->arg2;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CUSP::PublicKeySuite");
  }
  arg2 = (CUSP::PublicKeySuite)*argp2;
  
  
  result = ((CUSP::EndPoint const *)arg1)->publicKeyStr(arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_EndPoint_bytesSent(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::EndPoint const *)arg1)->bytesSent();
  swig_a->result = result; 
}


void
_wrap_EndPoint_bytesReceived(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  int64_t result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = (int64_t)((CUSP::EndPoint const *)arg1)->bytesReceived();
  swig_a->result = result; 
}


void
_wrap_EndPoint_contact(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::Address *arg2 = 0 ;
  CUSP::ServiceId arg3 ;
  CUSP::EndPoint::ContactHandler *arg4 = (CUSP::EndPoint::ContactHandler *) 0 ;
  CUSP::Abortable result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    CUSP::Address *arg2;
    short arg3;
    CUSP::EndPoint::ContactHandler *arg4;
    long : 0;
    CUSP::Abortable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = *(CUSP::Address **)&swig_a->arg2; 
  arg3 = (CUSP::ServiceId)swig_a->arg3; 
  arg4 = *(CUSP::EndPoint::ContactHandler **)&swig_a->arg4; 
  
  result = (arg1)->contact((CUSP::Address const &)*arg2,arg3,arg4);
  *(CUSP::Abortable **)&swig_a->result = new CUSP::Abortable(result); 
}


void
_wrap_EndPoint_hosts(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::Host::Iterator result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    CUSP::Host::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = ((CUSP::EndPoint const *)arg1)->hosts();
  *(CUSP::Host::Iterator **)&swig_a->result = new CUSP::Host::Iterator(result); 
}


void
_wrap_EndPoint_channels(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::Channel::Iterator result;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    long : 0;
    CUSP::Channel::Iterator *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  
  result = ((CUSP::EndPoint const *)arg1)->channels();
  *(CUSP::Channel::Iterator **)&swig_a->result = new CUSP::Channel::Iterator(result); 
}


void
_wrap_EndPoint_advertise(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::ServiceId arg2 ;
  CUSP::EndPoint::AdvertiseHandler *arg3 = (CUSP::EndPoint::AdvertiseHandler *) 0 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    short arg2;
    CUSP::EndPoint::AdvertiseHandler *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = (CUSP::ServiceId)swig_a->arg2; 
  arg3 = *(CUSP::EndPoint::AdvertiseHandler **)&swig_a->arg3; 
  
  (arg1)->advertise(arg2,arg3);
  
}


void
_wrap_EndPoint_unadvertise(void *swig_v)
{
  CUSP::EndPoint *arg1 = (CUSP::EndPoint *) 0 ;
  CUSP::ServiceId arg2 ;
  
  struct swigargs {
    CUSP::EndPoint *arg1;
    short arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::EndPoint **)&swig_a->arg1; 
  arg2 = (CUSP::ServiceId)swig_a->arg2; 
  
  (arg1)->unadvertise(arg2);
  
}


void
_wrap_Event_create(void *swig_v)
{
  CUSP::Event::Handler *arg1 = (CUSP::Event::Handler *) 0 ;
  CUSP::Event result;
  
  struct swigargs {
    CUSP::Event::Handler *arg1;
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event::Handler **)&swig_a->arg1; 
  
  result = CUSP::Event::create(arg1);
  *(CUSP::Event **)&swig_a->result = new CUSP::Event(result); 
}


void
_wrap_Event_schedule(void *swig_v)
{
  CUSP::Time *arg1 = 0 ;
  CUSP::Event::Handler *arg2 = (CUSP::Event::Handler *) 0 ;
  CUSP::Event result;
  
  struct swigargs {
    long long arg1;
    CUSP::Event::Handler *arg2;
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (CUSP::Time *)&swig_a->arg1; 
  arg2 = *(CUSP::Event::Handler **)&swig_a->arg2; 
  
  result = CUSP::Event::schedule((long long const &)*arg1,arg2);
  *(CUSP::Event **)&swig_a->result = new CUSP::Event(result); 
}


void
_wrap_Event_scheduleIn(void *swig_v)
{
  CUSP::Time *arg1 = 0 ;
  CUSP::Event::Handler *arg2 = (CUSP::Event::Handler *) 0 ;
  CUSP::Event result;
  
  struct swigargs {
    long long arg1;
    CUSP::Event::Handler *arg2;
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (CUSP::Time *)&swig_a->arg1; 
  arg2 = *(CUSP::Event::Handler **)&swig_a->arg2; 
  
  result = CUSP::Event::scheduleIn((long long const &)*arg1,arg2);
  *(CUSP::Event **)&swig_a->result = new CUSP::Event(result); 
}


void
_wrap_Event_time(void *swig_v)
{
  CUSP::Time result;
  
  struct swigargs {
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::Time)CUSP::Event::time();
  swig_a->result = result; 
}


void
_wrap_new_Event__SWIG_0(void *swig_v)
{
  CUSP::Event *result = 0 ;
  
  struct swigargs {
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (CUSP::Event *)new CUSP::Event();
  *(CUSP::Event **)&swig_a->result = result; 
}


void
_wrap_new_Event__SWIG_1(void *swig_v)
{
  CUSP::Event::Handler *arg1 = (CUSP::Event::Handler *) 0 ;
  CUSP::Event *result = 0 ;
  
  struct swigargs {
    CUSP::Event::Handler *arg1;
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event::Handler **)&swig_a->arg1; 
  
  result = (CUSP::Event *)new CUSP::Event(arg1);
  *(CUSP::Event **)&swig_a->result = result; 
}


void
_wrap_new_Event__SWIG_2(void *swig_v)
{
  CUSP::Event *arg1 = 0 ;
  CUSP::Event *result = 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
    long : 0;
    CUSP::Event *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  result = (CUSP::Event *)new CUSP::Event((CUSP::Event const &)*arg1);
  *(CUSP::Event **)&swig_a->result = result; 
}


void
_wrap_delete_Event(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Event_swap(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  CUSP::Event *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
    CUSP::Event *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  arg2 = *(CUSP::Event **)&swig_a->arg2; 
  
  (arg1)->swap(*arg2);
  
}


void
_wrap_Event_isValid(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::Event *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  result = (bool)((CUSP::Event const *)arg1)->isValid();
  swig_a->result = result; 
}


void
_wrap_Event_reschedule(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  CUSP::Time *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  arg2 = (CUSP::Time *)&swig_a->arg2; 
  
  (arg1)->reschedule((CUSP::Time const &)*arg2);
  
}


void
_wrap_Event_rescheduleIn(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  CUSP::Time *arg2 = 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  arg2 = (CUSP::Time *)&swig_a->arg2; 
  
  (arg1)->rescheduleIn((CUSP::Time const &)*arg2);
  
}


void
_wrap_Event_cancel(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  
  struct swigargs {
    CUSP::Event *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  (arg1)->cancel();
  
}


void
_wrap_Event_timeOfExecution(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  CUSP::Time result;
  
  struct swigargs {
    CUSP::Event *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  result = (CUSP::Time)((CUSP::Event const *)arg1)->timeOfExecution();
  swig_a->result = result; 
}


void
_wrap_Event_timeTillExecution(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  CUSP::Time result;
  
  struct swigargs {
    CUSP::Event *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  result = (CUSP::Time)((CUSP::Event const *)arg1)->timeTillExecution();
  swig_a->result = result; 
}


void
_wrap_Event_isScheduled(void *swig_v)
{
  CUSP::Event *arg1 = (CUSP::Event *) 0 ;
  bool result;
  
  struct swigargs {
    CUSP::Event *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(CUSP::Event **)&swig_a->arg1; 
  
  result = (bool)((CUSP::Event const *)arg1)->isScheduled();
  swig_a->result = result; 
}


#ifdef __cplusplus
}
#endif

